///////// Start symbol ///////// done

Program -> StatementList $

///////// Statement ///////// underway

StatementList -> Statement ';' StatementList
StatementList -> ';' StatementList // eat extraneous semi-colons
StatementList -> ε

Statement -> IdentifierStatement 
Statement -> FuncDeclOrDef 
Statement -> Return
Statement -> Block
Statement -> ConditionalStatement
Statement -> Loop

Statement -> 'break' [identifier]
Statement -> 'continue' [identifier]

///////// IdentifierStatement ///////// done

IdentifierStatement -> identifier OptionalType OptionalAssign
IdentifierStatement -> identifier ArraySubscript AssignmentStub
IdentifierStatement -> identifier FuncCall

OptionalType -> Type
OptionalType -> ε

OptionalAssign -> AssignmentStub
OptionalAssign -> ε

AssignmentStub -> '=' Expr

Block -> '{' StatementList '}'
Block -> '{' '}'

///////// Declaration /////////

Declaration -> identifier Type OptionalAssign

DeclarationList -> Declaration ';' DeclarationList
DeclarationList -> ε

///////// Func call ///////// done

FuncCall -> '(' ArgumentList ')'

ArgumentList -> NonSequenceExpr ',' ArgumentList
ArgumentList -> NonSequenceExpr
ArgumentList -> ε

///////// Func Declarations and Definitions ///////// done

FuncDeclOrDef -> 'func' identifier FuncDeclParam FuncDeclType
FuncDeclOrDef -> 'func' identifier FuncDeclParam FuncDeclType Block

FuncDeclParam -> '(' ParameterList ')'
FuncDeclParam -> ε

FuncDeclType -> '->' Type
FuncDeclType -> ε

ParameterList -> Parameter ',' ParameterList
ParameterList -> Parameter
ParameterList -> ε

Parameter -> identifier Type
Parameter -> Type

Return -> 'return' Expr

///////// EXPRESSIONS ///////// underway

Expr -> NonSequenceExpr Sequence
Sequence -> ',' NonSequenceExpr Sequence
Sequence -> ε

NonSequenceExpr -> ComparisonOpPrec

ComparisonOpPrec -> BinaryOpAddPrec ComparisonOpPrecR
ComparisonOpPrecR -> '==' BinaryOpAddPrec
ComparisonOpPrecR -> '!=' BinaryOpAddPrec
ComparisonOpPrecR -> '<=' BinaryOpAddPrec
ComparisonOpPrecR -> '>=' BinaryOpAddPrec
ComparisonOpPrecR -> '<' BinaryOpAddPrec
ComparisonOpPrecR -> '>' BinaryOpAddPrec
ComparisonOpPrecR -> ε

BinaryOpAddPrec -> BinaryOpMulPrec BinaryOpAddPrecR 
BinaryOpAddPrecR -> '+' BinaryOpMulPrec BinaryOpAddPrecR
BinaryOpAddPrecR -> '-' BinaryOpMulPrec BinaryOpAddPrecR
BinaryOpAddPrecR -> ε

BinaryOpMulPrec -> UnaryOp BinaryOpMulPrecR 
BinaryOpMulPrecR -> '*' UnaryOp BinaryOpMulPrecR
BinaryOpMulPrecR -> '/' UnaryOp BinaryOpMulPrecR
BinaryOpMulPrecR -> ε

UnaryOp -> '++' UnaryOp
UnaryOp -> '--' UnaryOp
UnaryOp -> '-' UnaryOp
UnaryOp -> '@' UnaryOp // Address of
UnaryOp -> '^' UnaryOp // Deref
UnaryOp -> '!' UnaryOp
UnaryOp -> ExprTerm

// Post-unary

ExprTerm -> '(' Expr ')'
ExprTerm -> identifier FuncCall
ExprTerm -> identifier ArraySubscript
ExprTerm -> identifier AssignmentStub
ExprTerm -> identifier
ExprTerm -> number
ExprTerm -> languageConstant
ExprTerm -> '"' string '"'

languageConstant -> true
languageConstant -> false
languageConstant -> null

ArraySubscript -> '[' Expr ']'

///////// Type ///////// underway

Type -> TypeModifiers

TypeModifiers -> BaseType TypeModifiersR
TypeModifiersR -> '^' TypeModifiersR
TypeModifiersR -> '[' Expr ']' TypeModifiersR
TypeModifiersR -> '[]' TypeModifiersR
TypeModifiersR -> ε

BaseType -> StructType
BaseType -> identifier
BaseType -> type

type -> void
type -> u?short
type -> u?int
type -> u?long

type -> u?char
type -> bool
type -> string

type -> float
type -> double
type -> extended // 80-bit

StructType -> 'struct' '{' DeclarationList '}'

///////// Conditional Statements ///////// done

ConditionalStatement -> 'if' Condition Statement OptionalElseblock

Condition -> '(' Expr ')'

OptionalElseblock -> 'else' Statement
OptionalElseblock -> ε

///////// Loops ///////// underway

Loop -> 'for' '(' Statement ';' Expression ';' Expression ')' LoopLabel Statement // C style for
Loop -> 'for' LoopLabel Statement // infinite loop // TODO: rename to something catchy maybe

Loop -> 'while' '(' Expr ')' LoopLabel Statement // c style while
Loop -> 'do' LoopLabel Statement 'while' '(' Expr ')' // c style do while (maybe find a new way)

// V2 but may as well define now
Loop -> 'foreach' '(' identifier 'in' Expr ')' LoopLabel Statement // C# like (as much as I don't want that)

LoopLabel -> '=' identifier
LoopLabel -> ε