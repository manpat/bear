Program:
	[Statement ';']*

Statement:
	Assignment
	Declaration
	FunctionDeclaration
	FunctionDefinition
	FunctionCall
	StatementExpression
	Return
	Block

Expression:
	'(' Expression ')'
	Expression ',' Expression
	Expression BinaryOp Expression
	UnaryOp Expression
	FunctionCall
	Assignment
	identifier
	number

Return:
	'return' Expression

Assignment:
	identifier '=' Expression

Declaration:
	identifier Type ['=' Expression]
	// Type inference
	// Const qualifiers 

FunctionDeclaration:
	'func' identifier ['(' [ArgumentList] ')'] ['->' Type]

FunctionDefinition:
	FunctionDeclaration Block
	
FunctionCall:
	identifier '(' [ArgumentList] ')'

Block:
	'{' [Statement ';']* '}'

Argument:
	[identifier] Type

ArgumentList:
 	Argument [',' Argument]*

BinaryOp:
	'+'
	'-'
	'*'
	'/'

UnaryOp:
	'-'
	'@' // Deref
	'^' // Address of
	'!'

identifier:
	[A-Za-z_][A-Za-z_0-9]* // Include unicode eventually

Type:
	void

	[u]int8
	[u]int16
	[u]int32
	[u]int64
	float32
	float64

	[u]char

	'func' ['(' [ArgumentList] ')'] ['->' Type]

	Type '[' [identifier|number] ']' // Static/Dynamic Array
	Type '^' // Pointer

number:
	[0-9][0-9_]*['.'[0-9_]*]